set hidden true
set ignorecase true
#set drawbox true
set icons true
set previewer ~/.local/scripts/lf/previewer.sh
set cleaner ~/.local/scripts/lf/clear_img.sh
set preview true
set tabstop 4
set wrapscan true
set timefmt '_2 Jan 2006 15:04:05'
set shell bash

# custom functions
cmd open ${{
    opener.sh "$id" "open" "$fx"
}}

cmd open_sec ${{
    opener.sh "$id" "open_sec" "$fx"
}}

cmd mkdir ${{
	printf "Directory Name: "
	read -r name
	mkdir -p "$name"
}}

cmd mkfile ${{
	printf "File Name: "
	read -r name
	$EDITOR "$name"
}}

cmd touch ${{
	printf "File Name: "
	read -r name
	touch "$name"
}}

cmd chmod ${{
    set -f
    printf "Files: \n%s\n" "$fx"
	printf "Mode Bits: "
	read -r bits

    SAVEIFS=$IFS
    IFS=$(printf "\n\b")
	for file in $fx; do
		chmod $bits $file
	done
    IFS=$SAVEIFS

	lf -remote 'send reload'
}}

cmd sudochmod ${{
    set -f
    printf "Files: \n%s\n" "$fx"
	printf "Mode Bits: "
	read -r bits

    SAVEIFS=$IFS
    IFS=$(printf "\n\b")
	for file in $fx; do
		doas chmod $bits $file
	done
    IFS=$SAVEIFS

	lf -remote 'send reload'
}}

cmd sudomkfile ${{
	printf "File Name: "
	read -r name
	doasedit.sh "$name"
}}

cmd unarchive ${{
    unarchive.sh -nl -d "$fx"

    read -n 1 -s -r -p "Press any key to continue"
    printf "\n"
}}

# TODO: better but still not perfect
# fix: tar: Removing leading `../' from member names
cmd zip ${{
    printf "Archive(zip) Name: "
    read -r name

    printf "%s" "$fx" | sed 's/.*/"&"/' | xargs -r realpath --relative-to="." | sed 's/.*/"&"/' | xargs -r 7z a -tzip "$name.zip"
    lf -remote "send unselect"

    read -n 1 -s -r -p "Press any key to continue"
    printf "\n"
}}
cmd tar ${{
    printf "Archive(tar) Name: "
    read -r name

    printf "%s" "$fx" | sed 's/.*/"&"/' | xargs -r realpath --relative-to="." -z | tar --null -T - -cvf "$name.tar"
    lf -remote "send unselect"

    read -n 1 -s -r -p "Press any key to continue"
    printf "\n"
}}
cmd targz ${{
    printf "Archive(targz) Name: "
    read -r name

    printf "%s" "$fx" | sed 's/.*/"&"/' | xargs -r realpath --relative-to="." -z | tar --null -T - -cvzf "$name.tar.gz"
    lf -remote "send unselect"

    read -n 1 -s -r -p "Press any key to continue"
    printf "\n"
}}
cmd tarbz2 ${{
    printf "Archive(tarbz2) Name: "
    read -r name

    printf "%s" "$fx" | sed 's/.*/"&"/' | xargs -r realpath --relative-to="." -z | tar --null -T - -cvjf "$name.tar.bz2"
    lf -remote "send unselect"

    read -n 1 -s -r -p "Press any key to continue"
    printf "\n"
}}

# trash-cli
cmd trash %{{
    set -f
    SAVEIFS=$IFS
    IFS=$(printf "\n\b")
	for file in $fx; do
        printf "%s\n\n" "$file"
        trash-put "$file"
	done
    IFS=$SAVEIFS
    printf "Deleted"
}}

cmd clear_trash %{{
    trash-empty
    printf "Trash emptied"
}}

cmd restore_trash ${{
    set -f

    if [ -n "$(trash-list)" ]; then
        dirs=$(printf "%s" "$(dirname $(trash-list | cut -d" " -f3))" | uniq)
        restore=0

        SAVEIFS=$IFS
        IFS=$(printf "\n\b")
        for d in $dirs; do
            if printf "%s" "$d" | grep -q "$PWD"; then
                restore=1
            fi
        done
        IFS=$SAVEIFS

        if [ "$restore" -eq 1 ]; then
            trash-restore
        else
            printf "No trashed files in current dir\n"
            read -n 1 -s -r -p "Press any key to continue"
            printf "\n"
        fi
    else
        printf "Trash is empty\n"
        read -n 1 -s -r -p "Press any key to continue"
        printf "\n"
    fi
}}

cmd list_trash ${{
    if [ -n "$(trash-list)" ]; then
	    trash-list | less
    else
        printf "Trash is empty\n"
        read -n 1 -s -r -p "Press any key to continue"
        printf "\n"
    fi
}}

cmd yank-path %{{
    if [ -n "$WAYLAND_DISPLAY" ]; then
        wl-copy "$fx" </dev/null 1>&0 2>&0
    else
        printf '%s' "$fx" | xclip -i -selection clipboard
    fi
    printf "Yanked path"
}}
cmd yank-basename %{{
    if [ -n "$WAYLAND_DISPLAY" ]; then
        wl-copy "$(basename -a -- "$fx" | head -c-1)" </dev/null 1>&0 2>&0
    else
        basename -a -- "$fx" | head -c-1 | xclip -i -selection clipboard
    fi
    printf "Yanked basename"
}}
cmd yank-dirname %{{
    if [ -n "$WAYLAND_DISPLAY" ]; then
        wl-copy "$(dirname -- "$f" | head -c-1)" </dev/null 1>&0 2>&0
    else
        dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
    fi
    printf "Yanked dirname"
}}
cmd yank-basename-without-extension %{{
    if [ -n "$WAYLAND_DISPLAY" ]; then
        wl-copy "$(basename -a -- "$fx" | cut -d. -f1 | head -c-1)" </dev/null 1>&0 2>&0
    else
        basename -a -- "$fx" | cut -d. -f1 | head -c-1 | xclip -i -selection clipboard
    fi
    printf "Yanked basename without extension"
}}

# dragon
cmd dragon %dragon-drop -a -x "$fx"
cmd dragon-stay %dragon-drop -a "$fx"
cmd dragon-individual %dragon-drop "$fx"
cmd dlfile %dlfile.sh

#fzf
cmd fzf_jump ${{
    res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ]; then
        cmd="cd"
    else
        cmd="select"
    fi
    lf -remote "send $id $cmd \"$res\""
}}

#copy/move
cmd paste ${{
    files=$(cat ~/.local/share/lf/files)
    mode=$(printf "%s" "$files" | head -1)
    files=$(printf "%s" "$files" | tail +2)
    case "$mode" in
        "copy") printf "%s" "$files" | sed 's/.*/"&"/' | xargs -ro cp -ivr -t "." ;;
        "move") printf "%s" "$files" | sed 's/.*/"&"/' | xargs -ro mv -iv -t "." ;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
	lf -remote 'send reload'
}}

cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    [ -z "$fs" ] && fs="$(ls)"
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

# share any file 256 MiB limit
cmd share ${{
    if [ -n "$WAYLAND_DISPLAY" ]; then
        wl-copy "$(curl -F"file=@$fx" https://0x0.st)" </dev/null 1>&0 2>&0
    else
        curl -F"file=@$fx" https://0x0.st | xclip -selection clipboard
    fi
}}

# show current directory in window title
cmd on-cd &{{
    # '&' commands run silently in background (which is what we want here),
    # but are not connected to stdout.
    # To make sure our escape sequence still reaches stdout we pipe it to /dev/tty
    printf "\033]0; "lf" $(pwd | sed "s|$HOME|~|")\007" > /dev/tty
}}
# also run at startup
on-cd

# warn about nested instances
%[ $LF_LEVEL -eq 1 ] || echo "Warning: You're in a nested lf instance!"

# dynamically set number of columns
cmd recol ${{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    else
        lf -remote "send $id set ratios 1:2:3"
    fi
}}
recol

cmd pdfmerge ${{
    pdfmerge.sh "$fx"
}}

# key bindings
# Remove some defaults
map m
map "'"
map '"'
map d
map c
map i
map r
map y
map t

# trash mappings
map dd trash
map tc clear_trash
map tr restore_trash
map tl list_trash

# file openers
map oc %code .
map oa ${{
    $EDITOR ~/doc/vimwiki/old/archInstall.txt
}}
map o.l ${{
    $EDITOR ~/.config/lf/lfrc
}}

# archive mappings
map az zip
map at tar
map ag targz
map ab tarbz2
map au unarchive

# dragon
map dr dragon
map ds dragon-stay
map di dragon-individual
map dl dlfile

# set Wallpaper
map sw ${{
    setWallpaper.sh "$f" >/dev/null 2>&1
}}

# basic
map . set hidden!
map DD delete
map p paste
map x cut
map yy copy
map yp yank-path
map yb yank-basename
map yd yank-dirname
map ye yank-basename-without-extension
map <enter> open
map e open_sec
map mf mkfile
map smf sudomkfile
map th touch
map md mkdir
map ch chmod
map sch sudochmod
map cx %{{
    chmod +x "$f"
    lf -remote 'send reload'
}}
map <f-2> rename
map <c-r> bulk-rename
map H top
map L bottom
map R reload
map C clear
# Rename the file with a completely different name
map rc %{{
	filename=$(basename "$f")

    printf "New Name: "
    read -r name
    mv "$filename" "$name"
    printf "Renamed \'$filename\' -> \'$name\'"
}}
# Edit the current filename
map ra &{{
	# get 'basename' of the selection
	filename="${f##*/}"
	# quote it so we won't deal with quotes in the lf -remote command
	filename="$(printf '%q' "$filename")"
	filename="${filename// /<space>}"

	lf -remote "send $id push :rename<space>$filename<enter>"
}}
# Edit filename before the extension
map re &{{
    # get 'basename' of the selection
	filename="${f##*/}"
	# quote it so we won't deal with quotes in the lf -remote command
	filename="$(printf '%q' "$filename")"
	filename="${filename// /<space>}"

	lf -remote "send $id push :rename<space>$filename<enter><a-b><c-b>"
}}
map <c-z> $ kill -STOP $PPID #put lf into background
map <esc> quit
map M ${{
    LESS="-irsMR +Gg"
    mediainfo "$f" | less
}}
map col recol

# zoxide
cmd z %{{
    result="$(zoxide query --exclude "${PWD}" -- "$@")"
    lf -remote "send ${id} cd '${result}'"
}}
cmd zi ${{
    result="$(zoxide query -i -- "$@")"
    lf -remote "send ${id} cd '${result}'"
}}

# movement
map gdl &lf -remote "send $id cd $(dirBook.sh -get download)"
map gdt &lf -remote "send $id cd $(dirBook.sh -get desktop)"

map gdo &lf -remote "send $id cd $(dirBook.sh -get documents)"
map gdc &lf -remote "send $id cd $(dirBook.sh -get documents)"
map gdn &lf -remote "send $id cd $(dirBook.sh -get nbdata)"

map gb &lf -remote "send $id cd $(dirBook.sh -get bilder)"
map gdv &lf -remote "send $id cd $(dirBook.sh -get dev)"
map gn &lf -remote "send $id cd $(dirBook.sh -get notizen)"
map gj &lf -remote "send $id cd $(dirBook.sh -get dev_java)"
map gc &lf -remote "send $id cd $(dirBook.sh -get dev_c++)"
map gsc &lf -remote "send $id cd $(dirBook.sh -get scripts)"
map gsr &lf -remote "send $id cd $(dirBook.sh -get source)"
map gp &lf -remote "send $id cd $(dirBook.sh -get projects)"

map g.c &lf -remote "send $id cd $(dirBook.sh -get config)"
map g.l &lf -remote "send $id cd $(dirBook.sh -get local)"

#fzf
map <c-f> :fzf_jump
