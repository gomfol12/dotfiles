#!/bin/zsh

### Helper functions to load/install files/plugins ###
function zsh_add_file()
{
    [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}

function zsh_add_plugin()
{
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then
        # For plugins
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" ||
            zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
    fi
}

# function zsh_add_completion() {
#     PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
#     if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then
#         # For completions
#         completion_file_path=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
#         fpath+="$(dirname "${completion_file_path}")"
#         zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
#     else
#         git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
#         fpath+=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
#         [ -f $ZDOTDIR/.zccompdump ] && $ZDOTDIR/.zccompdump
#     fi
#     completion_file="$(basename "${completion_file_path}")"
#     if [ "$2" = true ] && compinit "${completion_file:1}"
# }

### Functions for interactive use ###
# lf
lfcd()
{
    tmp="$(mktemp)"
    fid="$(mktemp)"
    lf.sh -command '$printf $id > '"$fid"'' -last-dir-path="$tmp" "$@"
    id="$(cat "$fid")"
    archivemount_dir="/tmp/__lf_archivemount_$id"
    if [ -f "$archivemount_dir" ]; then
        cat "$archivemount_dir" |
            while read -r line; do
                umount "$line"
                rmdir "$line"
            done
        rm -f "$archivemount_dir" 1>/dev/null
    fi
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp" 1>/dev/null
        if [ -d "$dir" ]; then
            if [ "$dir" != "$(pwd)" ]; then
                cd "$dir" || return
            fi
        fi
    fi
}

# pacman
pacin()
{
    pacman -Sl | awk '{print $2($4=="" ? "" : "*")}' | fzf --multi --preview 'echo {1} | tr -d "*" | xargs -r pacman -Si' | tr -d "*" | xargs -ro doas pacman -S
}

pacdel()
{
    pacman -Qq | fzf --multi --preview 'pacman -Qi {1}' | xargs -ro doas pacman -Rns
}

pacs()
{
    pacman -Sl | awk '{print $2($4=="" ? "" : "*")}' | fzf --multi --preview 'echo {1} | tr -d "*" | xargs -r pacman -Si' | tr -d "*"
}

parin()
{
    paru -Sl | awk '{s=$2; gsub(/\x1b\[[0-9;]*m/,"",s); print s ($4=="" ? "" : "*")}' | fzf --multi --preview 'echo {1} | tr -d "*" | xargs -r paru -Si' | tr -d "*" | xargs -ro paru --fm lf.sh $@ -S
}

pardel()
{
    paru -Qq | fzf --multi --preview 'paru -Qi {1}' | xargs -ro paru -Rncs
}

pars()
{
    paru -Sl | awk '{s=$2; gsub(/\x1b\[[0-9;]*m/,"",s); print s ($4=="" ? "" : "*")}' | fzf --multi --preview 'echo {1} | tr -d "*" | xargs -r paru -Si' | tr -d "*"
}

setup_flatpak_repos()
{
    if command -v flatpak 2>&1 >/dev/null; then
        flatpak --user remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        flatpak --user remote-add --if-not-exists flathub-beta https://flathub.org/beta-repo/flathub-beta.flatpakrepo
        echo "Flatpak repos setup."
    fi
}

# global vars for parfin, parfs, parfdel, ...
if command -v flatpak 2>&1 >/dev/null; then
    parf_flatpak_repos=()
    parf_per_user=()
    parf_cache_dir="/tmp/pacall_cache"
    \mkdir -p "$parf_cache_dir" || return 1

    parf_flatpak_repos=($(flatpak --user remotes | awk '{print $1}'))

    if [ -z "$parf_flatpak_repos" ]; then
        parf_flatpak_repos=($(flatpak --system remotes | awk '{print $1}'))
        parf_per_user=0
    else
        parf_per_user=1
    fi
fi

parf_fzf_preview()
{
    local package="${*//\*/}"
    local repo=""

    # find longest matching repo name
    for r in "${parf_flatpak_repos[@]}"; do
        if [[ "$package" == *"-$r" && ${#r} -gt ${#repo} ]]; then
            repo="$r"
        fi
    done

    if [[ -n "$repo" ]]; then
        package="${package%-"$repo"}"
        package="${package##*\(}" # remove everything before last (
        package="${package%%\)*}" # remove everything after last )

        if [[ "$parf_per_user" -eq 1 ]]; then
            flatpak --user remote-info "$repo" "$package" | tail -n +2
        else
            flatpak --system remote-info "$repo" "$package" | tail -n +2
        fi
    else
        paru -Si "$package"
    fi
}

parfs()
{
    if [[ -z "$parf_flatpak_repos" && -z "$parf_per_user" ]]; then
        echo "Flatpak not installed."
        return 1
    fi

    {
        paru -Sl | awk '{s=$2; gsub(/\x1b\[[0-9;]*m/, "", s); print s ($4 == "" ? "" : "*")}'
        for repo in "${parf_flatpak_repos[@]}"; do
            local cache_file="$parf_cache_dir/$repo.cache"
            if [[ ! -f "$cache_file" || $(find "$cache_file" -mmin +60) ]]; then
                local flatpak_packages=""
                local flatpak_packages_installed=""
                if [ "$parf_per_user" -eq 1 ]; then
                    flatpak_packages=$(flatpak --user remote-ls --app --columns=name,application "$repo")
                    flatpak_packages_installed=$(flatpak --user list --app --columns=name,application)
                else
                    flatpak_packages=$(flatpak --system remote-ls --app --columns=name,application "$repo")
                    flatpak_packages_installed=$(flatpak --system list --app --columns=name,application)
                fi
                awk -F'\t' -v r="$repo" '
                NR==FNR { lookup[$2] = 1; next }
                { printf "%s(%s)-%s%s\n", $1, $2, r, ($2 in lookup ? "*" : "")}
                ' <(echo "$flatpak_packages_installed") <(echo "$flatpak_packages") >"$cache_file"
            fi
            cat "$cache_file"
        done
    } | fzf --multi --preview '
            '"$(declare -p parf_flatpak_repos)"'
            '"$(declare -f parf_fzf_preview)"'
            '"$(declare -p parf_per_user)"'
            parf_fzf_preview {}
    ' | tr -d "*"
}

parfin()
{
    if [[ -z "$parf_flatpak_repos" && -z "$parf_per_user" ]]; then
        echo "Flatpak not installed."
        return 1
    fi

    local packages=$(parfs)

    if [ -z "$packages" ]; then
        return
    fi

    local pacman_packages=()
    local flatpak_packages=()

    # Sort packages
    while read -r package; do
        local matched_repo=""
        local matched_package=""
        for repo in "${parf_flatpak_repos[@]}"; do
            if [[ "$package" == *"-$repo" && "${#repo}" -gt "${#matched_repo}" ]]; then
                matched_repo="$repo"
                matched_package="${package%-"$repo"}"
                matched_package="${matched_package##*\(}" # remove everything before last (
                matched_package="${matched_package%%\)*}" # remove everything after last )
            fi
        done
        if [[ -n "$matched_repo" ]]; then
            flatpak_packages+=("$matched_repo $matched_package")
        else
            pacman_packages+=("$package")
        fi
    done <<<"$packages"

    # Install flatpak packages
    for repo in "${parf_flatpak_repos[@]}"; do
        local to_install=()
        for entry in "${flatpak_packages[@]}"; do
            if [[ "$repo" == "${entry%% *}" ]]; then
                to_install+=("${entry#* }")
            fi
        done
        if [[ ${#to_install[@]} -gt 0 ]]; then
            echo "Flatpak: Installing from $repo"
            if [ "$parf_per_user" -eq 1 ]; then
                flatpak --user install "$repo" "${to_install[@]}"
            else
                flatpak --system install "$repo" "${to_install[@]}"
            fi

            if [ "$?" -eq 0 ]; then
                \rm -rf "$parf_cache_dir/$repo.cache"
            fi
        fi
    done

    # Install pacman packages
    if [[ ${#pacman_packages[@]} -gt 0 ]]; then
        echo "Pacman: Installing"
        paru --fm lf.sh "$@" -S "${pacman_packages[@]}"
    fi
}

parfdel()
{
    if [[ -z "$parf_flatpak_repos" && -z "$parf_per_user" ]]; then
        echo "Flatpak not installed."
        return 1
    fi

    local packages="$(
        {
            pacman -Qq
            local flatpak_packages=""
            if [ "$parf_per_user" -eq 1 ]; then
                flatpak_packages=$(flatpak --user list --app --columns=name,application,origin)
            else
                flatpak_packages=$(flatpak --system list --app --columns=name,application,origin)
            fi
            awk -F'\t' '{printf "%s(%s)-%s\n", $1, $2, $3}' <(echo "$flatpak_packages")
        } | fzf --multi --preview '
            '"$(declare -p parf_flatpak_repos)"'
            '"$(declare -f parf_fzf_preview)"'
            '"$(declare -p parf_per_user)"'
            parf_fzf_preview {}
    ' | tr -d "*"
    )"

    if [ -z "$packages" ]; then
        return
    fi

    local pacman_packages=()
    local flatpak_packages=()

    # Sort packages
    while read -r package; do
        local matched_repo=""
        local matched_package=""
        for repo in "${parf_flatpak_repos[@]}"; do
            if [[ "$package" == *"-$repo" && "${#repo}" -gt "${#matched_repo}" ]]; then
                matched_repo="$repo"
                matched_package="${package%-"$repo"}"
                matched_package="${matched_package##*\(}" # remove everything before last (
                matched_package="${matched_package%%\)*}" # remove everything after last )
            fi
        done
        if [[ -n "$matched_repo" ]]; then
            flatpak_packages+=("$matched_repo $matched_package")
        else
            pacman_packages+=("$package")
        fi
    done <<<"$packages"

    for repo in "${parf_flatpak_repos[@]}"; do
        local to_uninstall=()
        for entry in "${flatpak_packages[@]}"; do
            if [[ "$repo" == "${entry%% *}" ]]; then
                to_uninstall+=("${entry#* }")
            fi
        done
        if [[ ${#to_uninstall[@]} -gt 0 ]]; then
            echo "Flatpak: Uninstalling from $repo"
            if [ "$parf_per_user" -eq 1 ]; then
                flatpak --user uninstall "${to_uninstall[@]}"
            else
                flatpak --system uninstall "${to_uninstall[@]}"
            fi

            if [ "$?" -eq 0 ]; then
                \rm -rf "$parf_cache_dir/$repo.cache"
            fi
        fi
    done

    if [[ ${#pacman_packages[@]} -gt 0 ]]; then
        echo "Pacman: Uninstalling"
        paru --fm lf.sh -Rns "${pacman_packages[@]}"
    fi
}

# scripts
se()
{
    local s
    s=$(find "$SCRIPT_DIR"/ -type f -o -type d -name ".git" -prune | sed -n "s@$SCRIPT_DIR/@@p" | fzf --preview "highlight -i $SCRIPT_DIR/{1} --stdout --out-format=ansi -q --force")
    [ -n "$s" ] && "$EDITOR" "$SCRIPT_DIR/$s"
}

# dotfiles
dot()
{
    configlist | fzf --preview "highlight -i $HOME/{1} --stdout --out-format=ansi -q --force" | sed "s@^@$HOME/@" | xargs -ro "$EDITOR"
}

# util
cl()
{
    if [ -d "$*" ]; then
        cd "$@" && exa -F --group-directories-first -a
    else
        if [ -n "$1" ]; then
            echo "'$1' not a dir..."
        else
            echo "no arguments provided"
        fi
    fi
}

mc()
{
    mkdir -pv $1 && cd $1
}

fkill()
{
    ps auxh | fzf -m --reverse --tac --bind='ctrl-r:reload(ps auxh)' --header=$'Press CTRL-R to reload\n' | awk '{print $2}' | xargs -r kill -"${1:-9}"
}

fman()
{
    man -k . | fzf --prompt='Man> ' | awk '{print $1}' | xargs -r man
}

man()
{
    local width=$(tput cols)
    [ $width -gt $MANWIDTH ] && width=$MANWIDTH
    env MANWIDTH=$width \
        man "$@"
}

getClassString()
{
    #xprop WM_CLASS | grep -o '"[^"]*"' | head -n 1
    xprop | grep WM_CLASS
}

getMime()
{
    file --mime-type "$@" -bL
}

key()
{
    xev | awk -F'[ )]+' '/^KeyPress/ { a[NR+2] } NR in a { printf "%-3s %s\n", $5, $8 }'
}

qtThemeFix()
{
    QT_QPA_PLATFORMTHEME=qt5ct "$@"
}

timer()
{
    start=$(date +%s)
    while true; do
        time="$(($(date +%s) - $start))"
        printf '\r%s ' "$(date -u -d "@$time" +%H:%M:%S)"
    done
}

countdown()
{
    if [ -z "$1" ]; then
        echo "Time missing!"
        return
    fi

    start="$(($(date +%s) + $1))"
    while [ "$start" -ge $(date +%s) ]; do
        time="$(($start - $(date +%s)))"
        printf '\r%s ' "$(date -u -d "@$time" +%H:%M:%S)"
    done
    play -q -n synth 0.15 sine 880 vol 0.5
    printf '\nCountdown finished\n'
}

function newalias()
{
    echo "alias $1='$2'" >>"$ZDOTDIR/zsh-aliases" && source "$ZDOTDIR/.zshrc"
}

setup_em()
{
    # web assembly
    if [ -f "/usr/bin/emsdk_env.sh" ]; then
        export EMSDK_QUIET=1
        source "/usr/bin/emsdk_env.sh"
    fi
}

fix_keyboard_delay()
{
    if [ "$(hostname)" = "$HOSTNAME_LAPTOP" ]; then
        xset r rate 200 40
        xset +dpms
        xset dpms 300 300 600
        xset s off
    else
        xset r rate 200 40
        xset -dpms
        xset s off
    fi
}

# pyhton venv shit

_testvenvdir()
{
    if [ -d ".venv" ]; then
        return 0
    fi
    return 1
}

mkvenv()
{
    if _testvenvdir; then
        echo "Venv already exists"
        return 1
    fi

    uv venv ".venv"
}

venv()
{
    if [ "$#" = 1 ]; then
        if [ ! -d "$1" ]; then
            echo "Not a directory."
            return 1
        fi
        cd "$1"
    fi

    if ! _testvenvdir; then
        echo "Venv does not exist."

        if [ -n "$ZSH_VERSION" ]; then
            vared -p "Create it? [Y/n]: " -c create_venv
        else
            read -p "Create it? [Y/n]: " -r create_venv
        fi

        if echo "$create_venv" | grep -E "^[yY]" -q || [ -z "$create_venv" ]; then
            mkvenv
        else
            return 1
        fi
    fi

    source ".venv/bin/activate"

    if [ "$#" = 1 ]; then
        cd -
    fi
}

rmvenv()
{
    if ! _testvenvdir; then
        echo "Venv does not exist"
        return 1
    fi

    \rm -rf ".venv"
}

nvim_source_python_venv()
{
    if [ -d "$NVIM_PYTHON_VENV_DIR" ]; then
        source "$NVIM_PYTHON_VENV_DIR/bin/activate"
    else
        echo "\$NVIM_PYTHON_VENV_DIR not set."
    fi
}

# TODO: remove
nvim_setup()
{
    # TODO finish list
    dep_programs=(
        "make"
        "cmake"
        "gcc"
        "g++"
        "python3"
        "npm"
        "lua"
        "lua5.1"
        "lua5.4"
        "luarocks"
    )
    exit=0

    for program in "${dep_programs[@]}"; do
        if ! command -v "$program" &>/dev/null; then
            echo "Dependency missing: $program"
            exit=1
        fi
    done
    if [ "$exit" = 1 ]; then
        return 1
    fi

    if [ -d "$NVIM_PYTHON_VENV_DIR" ] && [ -d "$NVIM_LUA_VENV_DIR" ]; then
        echo "NVIM python/lua venv directory already exists."
        return 1
    fi

    mkdir -p "$NVIM_PYTHON_VENV_DIR"
    mkdir -p "$NVIM_LUA_VENV_DIR"

    if [ ! -d "$NVIM_PYTHON_VENV_DIR" ] && [ ! -d "$NVIM_LUA_VENV_DIR" ]; then
        echo "NVIM python/lua venv directory could not be created."
        return 1
    fi

    # setup python venv
    python3 -m venv "$NVIM_PYTHON_VENV_DIR"
    source "$NVIM_PYTHON_VENV_DIR/bin/activate"
    # nvim and molten.nvim deps
    pip install pynvim jupyter_client cairosvg plotly kaleido pnglatex pyperclip nbformat ipykernel jupytext jupyter-cache
    python3 -m ipykernel install --user --name python
    deactivate

    # setup lua venv
    curl -s https://raw.githubusercontent.com/luarocks/hererocks/master/hererocks.py -o "$NVIM_LUA_VENV_DIR/hererocks.py"
    python3 "$NVIM_LUA_VENV_DIR/hererocks.py" "$NVIM_LUA_VENV_DIR" -r latest -j latest
    source "$NVIM_LUA_VENV_DIR/bin/activate"
    luarocks install --lua-version=5.1 magick
    deactivate-lua

    # setup plugins
    # nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
}

pip_update_all()
{
    pip --disable-pip-version-check list --outdated --format=json | python -c "import json, sys; print('\n'.join([x['name'] for x in json.load(sys.stdin)]))" | xargs -n1 pip install -U
}

xwayland_allow_root()
{
    xhost si:localuser:root
    $@
    xhost -si:localuser:root
}

scancode()
{
    if [ -n "$WAYLAND_DISPLAY" ]; then
        slurp | grim -g - - | zbarimg -
    else
        maim -s | zbarimg -
    fi
}

update()
{
    echo "--- news ---"
    paru -Pw
    if [ "$?" -eq 0 ]; then
        read -r "new_news?News available. Continue? [Y/n]: "
        if [[ ! "$new_news" =~ ^[Yy]$ ]] && [ -n "$new_news" ]; then
            return 1
        fi
    fi

    echo "--- updating system/aur ... ---"
    paru -Syu --norebuild --combinedupgrade --batchinstall
    if [ "$?" -ne 0 ]; then
        echo "Failed to update system/aur."
        return 1
    fi

    if command -v flatpak 2>&1 >/dev/null; then
        echo "--- updating flatpak ... ---"
        flatpak update
        if [ "$?" -ne 0 ]; then
            echo "Failed to update flatpak."
            return 1
        fi
    fi

    echo "--- updating nvim ... ---"
    read -r "update_nvim?Update nvim? [Y/n]: "
    if [[ "$update_nvim" =~ ^[Yy]$ ]] || [ -z "$update_nvim" ]; then
        # nvim --headless "+Lazy! sync" +qa
        nvim --headless "+Lazy! sync" "+MasonToolsUpdateSync" +qa
        if [ "$?" -ne 0 ]; then
            echo "Failed to update nvim."
            return 1
        fi
    fi
}
