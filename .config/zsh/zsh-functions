#!/bin/zsh

### Helper functions to load/install files/plugins ###
function zsh_add_file() {
    [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}

function zsh_add_plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then 
        # For plugins
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
    fi
}

# function zsh_add_completion() {
#     PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
#     if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then 
#         # For completions
#         completion_file_path=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
#         fpath+="$(dirname "${completion_file_path}")"
#         zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
#     else
#         git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
#         fpath+=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
#         [ -f $ZDOTDIR/.zccompdump ] && $ZDOTDIR/.zccompdump
#     fi
#     completion_file="$(basename "${completion_file_path}")"
#     if [ "$2" = true ] && compinit "${completion_file:1}"
# }

### Functions for interactive use ###
# lf
lfcd()
{
    tmp="$(mktemp)"
    fid="$(mktemp)"
    lf.sh -command '$printf $id > '"$fid"'' -last-dir-path="$tmp" "$@"
    id="$(cat "$fid")"
    archivemount_dir="/tmp/__lf_archivemount_$id"
    if [ -f "$archivemount_dir" ]; then
        cat "$archivemount_dir" |
            while read -r line; do
                umount "$line"
                rmdir "$line"
            done
        rm -f "$archivemount_dir" 1>/dev/null
    fi
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp" 1>/dev/null
        if [ -d "$dir" ]; then
            if [ "$dir" != "$(pwd)" ]; then
                cd "$dir" || return
            fi
        fi
    fi
}

# pacman
pacin()
{
    pacman -Sl | awk '{print $2($4=="" ? "" : "*")}' | fzf --multi --preview 'echo {1} | tr -d "*" | xargs -r pacman -Si' | tr -d "*" | xargs -ro doas pacman -S
}

pacdel()
{
    pacman -Qq | fzf --multi --preview 'pacman -Qi {1}' | xargs -ro doas pacman -Rncs
}

pacs()
{
    pacman -Sl | awk '{print $2($4=="" ? "" : "*")}' | fzf --multi --preview 'echo {1} | tr -d "*" | xargs -r pacman -Si' | tr -d "*"
}

parin()
{
    paru -Sl | awk '{print $2($4=="" ? "" : "*")}' | fzf --multi --preview 'echo {1} | tr -d "*" | xargs -r paru -Si' | tr -d "*" | xargs -ro paru -S
}

pardel()
{
    paru -Qq | fzf --multi --preview 'paru -Qi {1}' | xargs -ro paru -Rncs
}

pars()
{
    paru -Sl | awk '{print $2($4=="" ? "" : "*")}' | fzf --multi --preview 'echo {1} | tr -d "*" | xargs -r paru -Si' | tr -d "*"
}

# scripts
se()
{
    local s
    s=$(find "$SCRIPT_DIR"/ -type f | sed -n "s@$SCRIPT_DIR/@@p" | fzf --preview "highlight -i $SCRIPT_DIR/{1} --stdout --out-format=ansi -q --force")
    [ -n "$s" ] && "$EDITOR" "$SCRIPT_DIR/$s"
}

# dotfiles
dot()
{
    configlist | fzf --preview "highlight -i $HOME/{1} --stdout --out-format=ansi -q --force" | sed "s@^@$HOME/@" | xargs -ro "$EDITOR"
}

# util
cl()
{
    if [ -d "$*" ]; then
        cd "$@" && exa -F --group-directories-first -a
    else
        if [ -n "$1" ]; then
            echo "'$1' not a dir..."
        else
            echo "no arguments provided"
        fi
    fi
}

mc()
{
    mkdir -pv $1 && cd $1
}

fkill()
{
    ps auxh | fzf -m --reverse --tac --bind='ctrl-r:reload(ps auxh)' --header=$'Press CTRL-R to reload\n' | awk '{print $2}' | xargs -r kill -"${1:-9}"
}

fman()
{
    man -k . | fzf --prompt='Man> ' | awk '{print $1}' | xargs -r man
}

getClassString()
{
    #xprop WM_CLASS | grep -o '"[^"]*"' | head -n 1
    xprop | grep WM_CLASS
}

getMime()
{
    file --mime-type "$@" -bL
}

key()
{
    xev | awk -F'[ )]+' '/^KeyPress/ { a[NR+2] } NR in a { printf "%-3s %s\n", $5, $8 }'
}
