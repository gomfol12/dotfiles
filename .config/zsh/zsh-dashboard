#!/bin/zsh

# Based on zsh-magic-dashboard by @chrisgrieser (MIT License)
# https://github.com/chrisgrieser/zsh-magic-dashboard/blob/main/magic_dashboard.zsh

function _separator
{
    local sep_char="="
    local sep=""
    for ((i = 0; i < COLUMNS; i++)); do
        sep="$sep$sep_char"
    done
    printf "\033[1;90m$sep\033[0m"
}

function _listfiles
{
    if [[ ! -x "$(command -v eza)" ]]; then
        printf "Dashboard: eza not installed.\n" && return 1
    fi

    printf "%s" "$(exa --width="$COLUMNS" --all --grid --color=always \
        --sort=name --classify --group-directories-first)"
}

# show git log info
function _gitlog
{
    local git_dir="$PWD/.git/"
    local work_tree="$PWD"

    if [ "$1" = "config" ]; then
        git_dir="$HOME/.dotfiles/"
        work_tree="$HOME"
    fi

    git --git-dir="$git_dir" --work-tree="$work_tree" log --all --color \
        --format="%C(yellow)%h%C(red)%d%C(reset) %s %C(green)(%cr) %C(bold blue)%an%C(reset)" "-n ${DASHBOARD_GITLOG_LINES:-5}" |
        sed -e 's/ seconds* ago)/s)/' \
            -e 's/ minutes* ago)/m)/' \
            -e 's/ hours* ago)/h)/' \
            -e 's/ days* ago)/d)/' \
            -e 's/ weeks* ago)/w)/' \
            -e 's/ months* ago)/mo)/' \
            -e 's/grafted/ /' \
            -e 's/origin\//󰞶  /g' \
            -e 's/upstream\//  /g' \
            -e 's/HEAD/󱍞 /g' \
            -e 's/tag: /  /' \
            -e 's/\* /∘ /' \
            -Ee $'s/ (improv|fix|refactor|build|ci|docs|feat|test|perf|chore|revert|break|style)(\\(.+\\)|!)?:/ \033[1;35m\\1\033[1;36m\\2\033[0m:/' \
            -Ee $'s/ (fixup|squash)!/\033[1;32m&\033[0m/g' \
            -Ee $'s/`[^`]*`/\033[1;36m&\033[0m/g' \
            -Ee $'s/#[0-9]+/\033[1;31m&\033[0m/g' # issue numbers
    # INFO inserting ansi colors via sed requires leading $
}

# show changed files in a more informative way than normal `git status`
function _gitstatus
{
    # git_ls_files_output=$(git ls-files --others --exclude-standard)
    # if [ -n "$git_ls_files_output" ]; then
    #     echo "$git_ls_files_output" | xargs git add --intent-to-add
    # fi

    if [[ -n "$(git status --porcelain)" ]]; then
        local unstaged staged
        unstaged=$(git diff --color="always" --compact-summary --stat | sed -e '$d')
        staged=$(git diff --staged --color="always" --compact-summary --stat | sed -e '$d' \
            -e $'s/^ / \033[1;35m \033[0m/') # add marker for staged files
        local diffs=""
        if [[ -n "$unstaged" && -n "$staged" ]]; then
            diffs="$unstaged\n$staged"
        elif [[ -n "$unstaged" ]]; then
            diffs="$unstaged"
        elif [[ -n "$staged" ]]; then
            diffs="$staged"
        fi
        printf "$diffs\n" | sed \
            -e $'s/\\(gone\\)/\033[1;31mD     \033[0m/g' \
            -e $'s/\\(new\\)/\033[1;32mN    \033[0m/g' \
            -e 's/ Bin /    /g' \
            -e 's/ bytes$/ b/g' \
            -e $'s/ \\| Unmerged /  \033[1;31m  \033[0m /' \
            -Ee $'s_([^/ ]*)(/)_\033[1;36m\\1\033[1;33m\\2\033[0m_g' \
            -e $'s/ \\|/ \033[1;30m│\033[0m/g'
        _separator
    fi
}

function _enter_dashboard
{
    if git rev-parse --is-inside-work-tree &>/dev/null; then
        _gitlog
        _separator
        _gitstatus
    elif [ "$PWD" = "$HOME" ]; then
        _gitlog config
        _separator
    fi

    _listfiles
}

#-------------------------------------------------

# Based on Magic-Enter by @dufferzafar (MIT License)
# https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/magic-enter
function _custom_enter
{
    # Only run MAGIC_ENTER commands when in PS1 and command line is empty
    # http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets
    if [[ -n "$BUFFER" || "$CONTEXT" != start ]]; then
        return 0
    fi

    # only when in terminal with sufficient height
    if [[ "$LINES" -lt "${DASHBOARD_MIN_TERM_HEIGHT:-15}" ]]; then
        return 0
    fi

    echo && _enter_dashboard
}

# Wrapper for the accept-line zle widget (run when pressing Enter)
# If the wrapper already exists don't redefine it
type _custom_enter_accept-line &>/dev/null && return

al="$widgets[accept-line]"
case "$al" in
# Override the current accept-line widget, calling the old one
user:*)
    zle -N _custom_enter_orig_accept-line "${al#user:}"
    function _custom_enter_accept-line
    {
        _custom_enter
        zle _custom_enter_orig_accept-line -- "$@"
    }
    ;;
# If no user widget defined, call the original accept-line widget
builtin)
    function _custom_enter_accept-line
    {
        _custom_enter
        zle .accept-line
    }
    ;;
esac

zle -N accept-line _custom_enter_accept-line
