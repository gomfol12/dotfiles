# ==================== General Settings ====================

# TODO: layouts, statusbar?, sessions, scroll in buffers
set -g mouse on
set -g history-limit 50000
set -g default-terminal 'st-256color'
set -g default-shell '/bin/zsh'
set -g display-panes-time 2000
set -g display-time 2000
set -g mode-keys vi
set -g status-keys vi
set -s set-clipboard off

# set -g default-terminal 'alacritty'
# set -ag terminal-overrides ",alacritty:RGB"
# set -g default-terminal "screen-256color"

# statusline
set -g status-right "#{?window_bigger,[#{window_offset_x}#,#{window_offset_y}] ,}\"#{=21:pane_title}\" %R"
set -g window-status-current-style 'underscore'

# colors
set -g status-style 'bg=green,fg=black'

# title. suffix "- TMUX" needed
set-option -g set-titles on
set-option -g set-titles-string '#S: #W - TMUX'

# clipboard
set -s copy-command 'xclip -i -sel clip > /dev/null'

# ==================== Mappings ====================
# mapleader
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# window creation
bind-key -T prefix C-w new-window
bind-key -T prefix w new-window
bind-key -T prefix W new-window -c "#{pane_current_path}"

# window selection
bind-key -T prefix space next-window
bind-key -T prefix bspace previous-window

# pane splitting
bind-key -T prefix C-v split-window -hc "#{pane_current_path}"
bind-key -T prefix C-s split-window -vc "#{pane_current_path}"
bind-key -T prefix v split-window -hc "#{pane_current_path}"
bind-key -T prefix s split-window -vc "#{pane_current_path}"
bind-key -T prefix V split-window -h
bind-key -T prefix S split-window -v
unbind -T prefix %
unbind -T prefix '"'

# pane selection
# bind-key -T prefix C-j if -F '#{pane_at_bottom}' '' 'select-pane -D'
# bind-key -T prefix C-k if -F '#{pane_at_top}' '' 'select-pane -U'
# bind-key -T prefix C-h if -F '#{pane_at_left}' '' 'select-pane -L'
# bind-key -T prefix C-l if -F '#{pane_at_right}' '' 'select-pane -R'
# bind-key -T prefix j if -F '#{pane_at_bottom}' '' 'select-pane -D'
# bind-key -T prefix k if -F '#{pane_at_top}' '' 'select-pane -U'
# bind-key -T prefix h if -F '#{pane_at_left}' '' 'select-pane -L'
# bind-key -T prefix l if -F '#{pane_at_right}' '' 'select-pane -R'
unbind -T prefix Up
unbind -T prefix Down
unbind -T prefix Left
unbind -T prefix Right

# pane resize
bind-key -T prefix Up resize-pane -U
bind-key -T prefix Down resize-pane -D
bind-key -T prefix Left resize-pane -L
bind-key -T prefix Right resize-pane -R

# tree mode
bind-key -T prefix C-t choose-tree -s -w -Z
bind-key -T prefix t choose-tree -s -w -Z
bind-key -T prefix T choose-tree -Z

# window or pane killing
bind-key -T prefix C-x kill-pane
bind-key -T prefix x kill-pane
bind-key -T prefix X confirm-before -p "kill-window #W? (y/n)" kill-window
unbind -T prefix &

# pane swaping
bind-key -T prefix J swap-pane -D
bind-key -T prefix K swap-pane -U
unbind -T prefix '}'
unbind -T prefix '{'

# pane zooming
bind-key -T prefix C-z resize-pane -Z
bind-key -T prefix z resize-pane -Z

# source config
bind-key -T prefix C-c source-file ~/.config/tmux/tmux.conf \; display-message "tmux.conf reloaded."
bind-key -T prefix c source-file ~/.config/tmux/tmux.conf \; display-message "tmux.conf reloaded."

# window rotation
bind-key -T prefix r rotate-window
bind-key -T prefix R rotate-window -D

# shift or control Backspace fix
bind-key -n S-BSpace send-keys C-?
bind-key -n C-BSpace send-keys C-w

# shift space fix
 bind-key -n S-Space send-keys Space

# refresh
bind-key -T prefix C-b refresh-client
bind-key -T prefix b refresh-client

# layout
bind-key -T prefix enter next-layout

# copy and paste
bind-key -T prefix C-[ copy-mode
bind-key -T prefix C-] paste-buffer -p

bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel
bind-key -T copy-mode-vi C-c send-keys -X copy-pipe-and-cancel
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi Space send-keys -X rectangle-toggle

# mouse
unbind -T copy-mode-vi MouseDragEnd1Pane

# awesome-vim-tmux integration
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
	| grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n C-Left if-shell "$is_vim" "send-keys C-h" "run-shell 'sh ~/.config/awesome/awesomewm-vim-tmux-navigator/tmux_focus.sh left'"
bind -n C-Down if-shell "$is_vim" "send-keys C-j" "run-shell 'sh ~/.config/awesome/awesomewm-vim-tmux-navigator/tmux_focus.sh down'"
bind -n C-Up if-shell "$is_vim" "send-keys C-k" "run-shell 'sh ~/.config/awesome/awesomewm-vim-tmux-navigator/tmux_focus.sh up'"
bind -n C-Right if-shell "$is_vim" "send-keys C-l" "run-shell 'sh ~/.config/awesome/awesomewm-vim-tmux-navigator/tmux_focus.sh right'"
bind-key -T copy-mode-vi 'C-Left' "run-shell 'sh ~/.config/awesome/awesomewm-vim-tmux-navigator/tmux_focus.sh left'"
bind-key -T copy-mode-vi 'C-Down' "run-shell 'sh ~/.config/awesome/awesomewm-vim-tmux-navigator/tmux_focus.sh down'"
bind-key -T copy-mode-vi 'C-Up' "run-shell 'sh ~/.config/awesome/awesomewm-vim-tmux-navigator/tmux_focus.sh up'"
bind-key -T copy-mode-vi 'C-Right' "run-shell 'sh ~/.config/awesome/awesomewm-vim-tmux-navigator/tmux_focus.sh right'"

# ==================== Plugins ====================

# install plugin manager
if "test ! -d ~/.config/tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm && ~/.config/tmux/plugins/tpm/bin/install_plugins'"

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-copycat'

set -g @open 'o'
set -g @open-editor 'C-o'
set -g @open-S 'https://search.brave.com/search?q='

set -g @copycat_hash_search 'C-e'
set -g @copycat_ip_search 'C-i'

set -g @tpm-clean 'N'

run '~/.config/tmux/plugins/tpm/tpm'
